import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import CredentialsProvider from "next-auth/providers/credentials";
import { prisma } from "@/lib/prisma"; // Import your Prisma instance
import bcrypt from "bcrypt"; // To validate passwords

const handler = NextAuth({
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
    }),
    CredentialsProvider({
      name: "Email and Password",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials, req) {
        // Fetch user from database using Prisma
        const user = await prisma.user.findUnique({
          where: { userEmail: credentials?.email },
        });

        // Check if the user exists
        if (!user) {
          return null; // User not found, return null
        }

        // Check if the password is correct by comparing hashed passwords
        const isPasswordValid = await bcrypt.compare(
          credentials!.password,
          user.password // Assuming user.password is the hashed password stored in the DB
        );

        if (!isPasswordValid) {
          throw new Error("Invalid password");
        }

        // Return the authenticated user
        return {
          id: user.userId, // Ensure this is a number
          name: user.username,
          email: user.userEmail,
        };
      },
    }),
  ],

  pages: {
    signIn: "/auth/signin", // Custom sign-in page
    error: "/auth/error", // Error page for failed sign-in
  },

  callbacks: {
    async jwt({ token, user }) {
      // If user exists, include the user ID in the token
      if (user) {
        token.id = Number(user.id); // Ensure this is treated as a number
      }
      return token;
    },

    async session({ session, token }) {
      // Include user ID in the session, casting it to number
      if (token?.id) {
        session.user.id = Number(token.id); // Ensure this is treated as a number
      }

      return session;
    },

    async signIn({ user, account, profile, email, credentials }) {
      // Check if the user exists in the database
      const dbUser = await prisma.user.findUnique({
        where: { userEmail: user.email ?? "" },
      });

      if (!dbUser) {
        // If the user doesn't exist, redirect them to an onboarding page
        return `/auth/onboarding?email=${user.email ?? ""}`;
      }

      // If user exists, redirect to the dashboard
      return `${process.env.NEXT_PUBLIC_BASE_URL}/`; // Redirect to dashboard
    },

    async redirect({ url, baseUrl }) {
      // Redirect logic to control where users go after sign-in
      if (url.startsWith(baseUrl)) {
        return url;
      }
      return baseUrl; // Always redirect to the base URL (i.e., dashboard or home page)
    },
  },

  session: {
    strategy: "jwt", // Use JWT for session
    maxAge: 30 * 24 * 60 * 60, // Set session expiration time (30 days)
  },

  debug: process.env.NODE_ENV === "development",
});

export { handler as GET, handler as POST };
